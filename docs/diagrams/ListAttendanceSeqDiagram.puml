@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":ListCommandParser" as ListCommandParser LOGIC_COLOR
participant "la:ListAttendanceCommand" as ListAttendanceCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("list attendance w/1 tg/G2")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("list attendance w/1 tg/G2")
activate AddressBookParser

create ListCommandParser
AddressBookParser -> ListCommandParser
activate ListCommandParser

ListCommandParser --> AddressBookParser
deactivate ListCommandParser

AddressBookParser -> ListCommandParser : parse("attendance w/1 tg/G2")
activate ListCommandParser

create ListAttendanceCommand
ListCommandParser -> ListAttendanceCommand
activate ListAttendanceCommand

ListAttendanceCommand --> ListCommandParser : la
deactivate ListAttendanceCommand

ListCommandParser --> AddressBookParser : la
deactivate ListCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
ListCommandParser -[hidden]-> AddressBookParser
destroy ListCommandParser

AddressBookParser --> LogicManager : la
deactivate AddressBookParser

LogicManager -> ListAttendanceCommand : execute()
activate ListAttendanceCommand

ListAttendanceCommand -> Model : clearFilters()
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> Model : getFilteredPersonList()
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> Model : getAddressBook()
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> Model : addFilter(tutorialPredicate(G2))
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> Model : getFilteredPersonList()
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> ListAttendanceCommand : unmarkedPersonsListBuilder()
activate ListAttendanceCommand

ListAttendanceCommand --> ListAttendanceCommand : list of persons with\nunmarked attendance
deactivate ListAttendanceCommand

ListAttendanceCommand -> Model : addFilter(absencePredicate(1, G2))
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> Model : getFilteredPersonList()
activate Model

Model --> ListAttendanceCommand
deactivate Model

ListAttendanceCommand -> ListAttendanceCommand : summaryBuilder()
activate ListAttendanceCommand

ListAttendanceCommand --> ListAttendanceCommand : attendance summary
deactivate ListAttendanceCommand

create CommandResult
ListAttendanceCommand -> CommandResult
activate CommandResult

CommandResult --> ListAttendanceCommand
deactivate CommandResult

ListAttendanceCommand --> LogicManager : result
deactivate ListAttendanceCommand

[<--LogicManager
deactivate LogicManager
@enduml
