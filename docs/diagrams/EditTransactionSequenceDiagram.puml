@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":SpendNSplitParser" as SpendNSplitParser LOGIC_COLOR
participant ":EditTransactionCommandParser" as EditTransactionCommandParser LOGIC_COLOR
participant ":TransactionDescriptor" as TransactionDescriptor LOGIC_COLOR
participant "et:EditTransactionCommand" as EditTransactionCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
participant "<<class>>\nEditTransactionCommand" as EditTransactionCommandClass LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("editTransaction ...")
activate LogicManager

LogicManager -> Model : getCommandMap()
activate Model
Model --> LogicManager : commandMap
deactivate Model

LogicManager -> SpendNSplitParser : parseCommand("editTransaction ...", commandMap)
activate SpendNSplitParser

create EditTransactionCommandParser
SpendNSplitParser -> EditTransactionCommandParser
activate EditTransactionCommandParser

EditTransactionCommandParser --> SpendNSplitParser
deactivate EditTransactionCommandParser

SpendNSplitParser -> EditTransactionCommandParser : parse("...")
activate EditTransactionCommandParser

create TransactionDescriptor
EditTransactionCommandParser -> TransactionDescriptor
activate TransactionDescriptor

TransactionDescriptor --> EditTransactionCommandParser
deactivate TransactionDescriptor

create EditTransactionCommand
EditTransactionCommandParser -> EditTransactionCommand
activate EditTransactionCommand

EditTransactionCommand --> EditTransactionCommandParser : et
deactivate EditTransactionCommand

EditTransactionCommandParser --> SpendNSplitParser : et
deactivate EditTransactionCommandParser

SpendNSplitParser --> LogicManager : et
deactivate SpendNSplitParser

LogicManager -> EditTransactionCommand : execute()
activate EditTransactionCommand

EditTransactionCommand -> Model : getFilteredTransactionList()
activate Model

Model --> EditTransactionCommand
deactivate Model

EditTransactionCommand -> EditTransactionCommandClass : createEditedTransaction(originalTransaction, transactionDescriptor)
activate EditTransactionCommandClass

EditTransactionCommandClass --> EditTransactionCommand : editedTransaction
deactivate EditTransactionCommandClass

EditTransactionCommand -> Model : setTransaction(originalTransaction, editedTransaction)
activate Model

Model --> EditTransactionCommand
deactivate Model

create CommandResult
EditTransactionCommand -> CommandResult
activate CommandResult

CommandResult --> EditTransactionCommand
deactivate CommandResult

EditTransactionCommand --> LogicManager : result
deactivate EditTransactionCommand

[<--LogicManager
deactivate LogicManager
@enduml
