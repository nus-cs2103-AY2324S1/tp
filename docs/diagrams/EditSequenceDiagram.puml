@startuml
!include style.puml
skinparam noteTextAlignment left

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant "parser:EditCommandParser" as EditCommandParser LOGIC_COLOR
participant "descriptor:EditPersonDescriptor" as EditPersonDescriptor LOGIC_COLOR
participant "command:EditCommand" as EditCommand LOGIC_COLOR
participant "result:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "model:Model" as Model MODEL_COLOR

end box
[-> LogicManager : execute("edit 1 n/Alex sb/Maths")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("edit 1 n/Alex sb/Maths")
activate AddressBookParser

create EditCommandParser
AddressBookParser -> EditCommandParser
activate EditCommandParser

EditCommandParser --> AddressBookParser : parser
deactivate EditCommandParser

AddressBookParser -> EditCommandParser : parse(" 1 n/Alex sb/Maths")
activate EditCommandParser

'note right
'//(omitted to reduce diagram complexity)//
'**parse** method argument is processed as follows:
'* separated into prefixes ("n/","p/", etc) using the ArgumentTokenizer class,
'* have accompanying values (John Doe, Banana, 5, etc)
'encapsulated in relevant data classes (Name, Phone, etc)
'* passed as arguments for Order instantiation
'end note

create EditPersonDescriptor
EditCommandParser -> EditPersonDescriptor
activate EditPersonDescriptor

EditPersonDescriptor --> EditCommandParser : descriptor
deactivate EditPersonDescriptor

create EditCommand
EditCommandParser -> EditCommand : EditCommand(index, editPersonDescriptor);
activate EditCommand

note left
index:
the index of person to be edited

editPersonDescriptor:
a person object where its field are the edited values
end note

EditCommand --> EditCommandParser : command
deactivate EditCommand

EditCommandParser --> AddressBookParser : command
deactivate EditCommandParser

AddressBookParser --> LogicManager : command
deactivate AddressBookParser

destroy EditCommandParser

LogicManager -> EditCommand : execute(model)
activate EditCommand

EditCommand -> Model : getSortedPersonList()
activate Model

Model --> EditCommand : lastShownList
deactivate Model

EditCommand -> EditCommand: createEditedPerson(personToEdit, editPersonDescriptor)
activate EditCommand

note right
personToEdit:
the person to be edited

editPersonDescriptor
a person object where its field are the edited values
end note

EditCommand --> EditCommand: editedPerson
deactivate EditCommand

EditCommand -> Model : purgeAddressBook()
activate Model
deactivate Model

EditCommand -> Model : setPerson(personToEdit, editedPerson, isEditingSchedule)
activate Model
deactivate Model

note right
personToEdit:
the person to be edited

editedPerson:
the editedPerson

isEditingSchedule:
boolean to check if day,begin, and end fields are being edited
end note

EditCommand -> Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
activate Model
deactivate Model

note right
PREDICATE_SHOW_ALL_PERSONS:
Predicate to show all persons
end note

EditCommand -> Model : commitAddressBook();
activate Model
deactivate Model

create CommandResult
EditCommand -> CommandResult
activate CommandResult

CommandResult --> EditCommand
deactivate CommandResult

EditCommand --> LogicManager : result
deactivate EditCommand
EditCommand -[hidden]-> LogicManager : result

[<--LogicManager
deactivate LogicManager
@enduml
