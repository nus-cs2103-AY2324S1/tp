@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":RsvpCommandParser" as RsvpCommandParser LOGIC_COLOR
participant "d:RsvpCommand" as RsvpCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
participant ":RsvpContainsEventPredicate" as RsvpContainsEventPredicate LOGIC_COLOR

end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant ":Event" as Event MODEL_COLOR
end box

[-> LogicManager : execute("rsvp eid/1 pid/1 s/CC")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("rsvp eid/1 pid/1 s/CC")
activate AddressBookParser

create RsvpCommandParser
AddressBookParser -> RsvpCommandParser
activate RsvpCommandParser

RsvpCommandParser --> AddressBookParser
deactivate RsvpCommandParser

AddressBookParser -> RsvpCommandParser : parse("eid/1 pid/1 s/CC")
activate RsvpCommandParser

create RsvpCommand
RsvpCommandParser -> RsvpCommand
activate RsvpCommand

RsvpCommand --> RsvpCommandParser : r
deactivate RsvpCommand

RsvpCommandParser --> AddressBookParser : r
deactivate RsvpCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
RsvpCommandParser -[hidden]-> AddressBookParser
destroy RsvpCommandParser

AddressBookParser --> LogicManager : r
deactivate AddressBookParser

LogicManager -> RsvpCommand : execute()
activate RsvpCommand

RsvpCommand -> Model : createRsvp(eventIndex, personIndex, rsvpStatus)
activate Model

Model --> RsvpCommand
deactivate Model

RsvpCommand -> Model : isValidRsvp(rsvp)
activate Model

Model --> RsvpCommand
deactivate Model

RsvpCommand -> Model : addRsvp(rsvp)
activate Model

Model --> RsvpCommand
deactivate Model

create RsvpContainsEventPredicate
RsvpCommand -> RsvpContainsEventPredicate
activate RsvpContainsEventPredicate

RsvpContainsEventPredicate --> RsvpCommand : pred
deactivate RsvpContainsEventPredicate

RsvpCommand -> Model : updateFilteredEventRsvpList(pred)
activate Model

Model --> RsvpCommand
deactivate Model

RsvpCommand -> Model : setEventToView(event)
activate Model

Model --> RsvpCommand
deactivate Model

create CommandResult
RsvpCommand -> CommandResult
activate CommandResult

CommandResult --> RsvpCommand
deactivate CommandResult

RsvpCommand --> LogicManager : result
deactivate RsvpCommand

[<--LogicManager
deactivate LogicManager
@enduml
