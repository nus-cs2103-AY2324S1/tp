@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":GradeCommandParser" as GradeCommandParser LOGIC_COLOR
participant "g:GradeCommand" as GradeCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant "studentToGrade:Person" as Person MODEL_COLOR
participant ":Assignment" as Assignment MODEL_COLOR
end box
[-> LogicManager : execute("grade 1 n/Lab g/80")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("grade 1 n/Lab g/80")
activate AddressBookParser

create GradeCommandParser
AddressBookParser -> GradeCommandParser
activate GradeCommandParser

GradeCommandParser --> AddressBookParser
deactivate GradeCommandParser

AddressBookParser -> GradeCommandParser : parse("1 n/Lab g/80")
activate GradeCommandParser

create GradeCommand
GradeCommandParser -> GradeCommand
activate GradeCommand

GradeCommand --> GradeCommandParser : g
deactivate GradeCommand

GradeCommandParser --> AddressBookParser : g
deactivate GradeCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.`
GradeCommandParser -[hidden]-> AddressBookParser
destroy GradeCommandParser

AddressBookParser --> LogicManager : g
deactivate AddressBookParser

LogicManager -> GradeCommand : execute()
activate GradeCommand

GradeCommand -> Model : getFilteredPersonList()
activate Model

Model --> GradeCommand : lastShownList
deactivate Model

GradeCommand -> Person : get()
activate Person

Person --> GradeCommand : studentToGrade
deactivate Person

create Assignment
GradeCommand -> Assignment
activate Assignment

Assignment --> GradeCommand : studentAssignment
deactivate Assignment

GradeCommand -> Person : getAssignments()
activate Person

Person --> GradeCommand : studentAssignments
deactivate Person

group loop [for assignment in studentAssignments]
    opt assignment equals studentAssignment
        Assignment <- GradeCommand : setScore(score)
    end
end

GradeCommand -> Model : updatePerson(studentToGrade)
activate Model

Model --> GradeCommand
deactivate Model

create CommandResult
GradeCommand -> CommandResult
activate CommandResult

CommandResult --> GradeCommand
deactivate CommandResult

GradeCommand --> LogicManager : result
deactivate GradeCommand



[<--LogicManager
deactivate LogicManager
@enduml
