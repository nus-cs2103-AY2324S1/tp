import type { NodeProcessorConfig } from './NodeProcessor';
import type { PageSources } from '../Page/PageSources';
import { MbNode } from '../utils/node';
export declare function hasTagLink(node: MbNode): boolean;
export declare function getDefaultTagsResourcePath(node: MbNode): any;
/**
 * @param {string} resourcePath parsed from the node's relevant attribute
 * @returns {boolean} whether the resourcePath is a valid intra-site link
 */
export declare function isIntraLink(resourcePath: string | undefined): boolean;
/**
 * Converts relative links in elements to absolute ones, prepended by the {@param baseUrl}.
 * This is needed because a relative link may have been from an included file (through <include>, etc.),
 * hence we need to rewrite the link accordingly.
 *
 * TODO allow plugins to tap into this process / extend {@link defaultTagLinkMap}
 *
 * @param  node from the dom traversal
 * @param  cwf as flagged from {@link NodeProcessor}
 * @param  rootPath of the root site
 * @param  baseUrl
 */
export declare function convertRelativeLinks(node: MbNode, cwf: string, rootPath: string, baseUrl: string): void;
export declare function convertMdExtToHtmlExt(node: MbNode): void;
/**
 * Serves as an internal intra-link validator. Checks if the intra-links are valid.
 * If the intra-links are suspected to be invalid, a warning message will be logged.
 *
 * @param  resourcePath parsed from the node's relevant attribute
 * @param  cwf as flagged from {@link NodePreprocessor}
 * @param  config passed for page metadata access
 * @returns  these string return values are for unit testing purposes only
 */
export declare function validateIntraLink(resourcePath: string, cwf: string, config: NodeProcessorConfig): string;
/**
 * Resolves and collects source file paths pointed to by attributes in nodes for live reload.
 * Only necessary for plugins for now.
 *
 * @param  node from the dom traversal
 * @param  rootPath site root path to resolve the link from
 * @param  baseUrl base url to strip off the link (if any)
 * @param  pageSources {@link PageSources} object to add the resolved file path to
 * @returns  these string return values are for unit testing purposes only
 */
export declare function collectSource(node: MbNode, rootPath: string, baseUrl: string, pageSources: PageSources): string | void;
//# sourceMappingURL=linkProcessor.d.ts.map