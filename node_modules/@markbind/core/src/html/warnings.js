"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.warnConflictingAtributesMap = void 0;
const logger = __importStar(require("../utils/logger"));
/**
 * Check and warns if element has conflicting attributes.
 * Note that attirbutes in `attrsConflictingWith` are not in conflict with each other,
 * but only towards `attribute`
 * @param node Root element to check
 * @param attribute An attribute that is conflicting with other attributes
 * @param attrsConflictingWith The attributes conflicting with `attribute`
 */
function _warnConflictingAttributes(node, attribute, attrsConflictingWith) {
    if (!(attribute in node.attribs)) {
        return;
    }
    attrsConflictingWith.forEach((conflictingAttr) => {
        if (conflictingAttr in node.attribs) {
            logger.warn(`Usage of conflicting ${node.name} attributes: `
                + `'${attribute}' with '${conflictingAttr}'`);
        }
    });
}
exports.warnConflictingAtributesMap = {
    box: (node) => {
        _warnConflictingAttributes(node, 'light', ['seamless']);
        _warnConflictingAttributes(node, 'no-background', ['background-color', 'seamless']);
        _warnConflictingAttributes(node, 'no-border', ['border-color', 'border-left-color', 'seamless']);
        _warnConflictingAttributes(node, 'no-icon', ['icon']);
    },
};
//# sourceMappingURL=warnings.js.map