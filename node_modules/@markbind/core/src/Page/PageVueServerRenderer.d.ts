import * as VueCompiler from 'vue-template-compiler';
import type { PageConfig, PageAssets } from './PageConfig';
import type { Page } from '.';
interface PageEntry {
    page: Page;
    compiledVuePage: VueCompiler.CompiledResultFunctions;
    pageNav: string;
}
/**
 * Compiles page into Vue Application to get the page render function and places
 * it into a script so that the browser can retrieve the page render function to
 * render the page during Vue mounting.
 *
 * This is to avoid the overhead of compiling the page into Vue application
 * on the client's browser (alleviates FOUC). It is also the pre-requisite to enable SSR.
 *
 * @param content Page content to be compiled into Vue app
 */
declare function compileVuePageAndCreateScript(content: string, pageConfig: PageConfig, pageAsset: PageAssets): Promise<VueCompiler.CompiledResultFunctions>;
/**
 * Renders Vue page app into html string (Vue SSR).
 * This function will install the MarkBindVue plugin and render the built Vue page content into html string.
 */
declare function renderVuePage(compiledVuePage: VueCompiler.CompiledResultFunctions): Promise<string>;
/**
 * Retrieves the latest updated MarkBindVue bundle from webpack compiler watcher,
 * re-render all the built pages, and output the page html files.
 * This function will only be used in development mode (for MarkBindVue bundle hot-reloading purposes).
 */
declare function updateMarkBindVueBundle(newBundle: string): Promise<void>;
export declare const pageVueServerRenderer: {
    compileVuePageAndCreateScript: typeof compileVuePageAndCreateScript;
    renderVuePage: typeof renderVuePage;
    updateMarkBindVueBundle: typeof updateMarkBindVueBundle;
    pageEntries: Record<string, PageEntry>;
};
export {};
//# sourceMappingURL=PageVueServerRenderer.d.ts.map