"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageVueServerRenderer = void 0;
/* eslint-disable import/no-import-module-exports */
/*
  Note: the function `requireFromString` causes eslint to detect a false-positive
  due to the usage of `module`. Hence, the use of the above `eslint-disable`.
*/
const vue_1 = __importDefault(require("vue"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const VueCompiler = __importStar(require("vue-template-compiler"));
const vue_server_renderer_1 = require("vue-server-renderer");
const logger = __importStar(require("../utils/logger"));
/* eslint-enable import/no-import-module-exports */
let bundle = require('@markbind/core-web/dist/js/vueCommonAppFactory.min');
const { renderToString } = (0, vue_server_renderer_1.createRenderer)();
// hold the mapping of sourcePath to latest built pages (for hot-reload dev purposes)
const pageEntries = {};
/**
 * Compiles page into Vue Application to get the page render function and places
 * it into a script so that the browser can retrieve the page render function to
 * render the page during Vue mounting.
 *
 * This is to avoid the overhead of compiling the page into Vue application
 * on the client's browser (alleviates FOUC). It is also the pre-requisite to enable SSR.
 *
 * @param content Page content to be compiled into Vue app
 */
function compileVuePageAndCreateScript(content, pageConfig, pageAsset) {
    return __awaiter(this, void 0, void 0, function* () {
        // Compile Vue Page
        const compiledVuePage = VueCompiler.compileToFunctions(content);
        // Set up script content
        const outputContent = `
    var pageVueRenderFn = ${compiledVuePage.render};
    var pageVueStaticRenderFns = [${compiledVuePage.staticRenderFns}];
  `;
        // Get script file name
        const pageHtmlFileName = path_1.default.basename(pageConfig.resultPath, '.html');
        const scriptFileName = `${pageHtmlFileName}.page-vue-render.js`;
        /*
         * Add the script file path for this page's render function to the page's assets (to populate page.njk).
         * The script file path is the same as the page's file path.
         */
        pageAsset.pageVueRenderJs = scriptFileName;
        // Get script's absolute file path to output script file
        const dirName = path_1.default.dirname(pageConfig.resultPath);
        const filePath = path_1.default.join(dirName, scriptFileName);
        yield fs_extra_1.default.outputFile(filePath, outputContent);
        return compiledVuePage;
    });
}
/**
 * Renders Vue page app into html string (Vue SSR).
 * This function will install the MarkBindVue plugin and render the built Vue page content into html string.
 */
function renderVuePage(compiledVuePage) {
    return __awaiter(this, void 0, void 0, function* () {
        const { MarkBindVue, appFactory } = bundle;
        const { components, directives } = MarkBindVue;
        const VueAppPage = new vue_1.default(Object.assign({ render(createElement) {
                return compiledVuePage.render.apply(this, createElement);
            }, staticRenderFns: compiledVuePage.staticRenderFns, components,
            directives }, appFactory()));
        return renderToString(VueAppPage);
    });
}
/**
 * Referenced from stackOverflow:
 * https://stackoverflow.com/questions/17581830/load-node-js-module-from-string-in-memory
 *
 * Credits to Dominic
 */
function requireFromString(src, filename) {
    const m = new module.constructor();
    m.paths = module.paths; // without this, we won't be able to require Vue in the string module
    m._compile(src, filename);
    return m.exports;
}
/**
 * Retrieves the latest updated MarkBindVue bundle from webpack compiler watcher,
 * re-render all the built pages, and output the page html files.
 * This function will only be used in development mode (for MarkBindVue bundle hot-reloading purposes).
 */
function updateMarkBindVueBundle(newBundle) {
    return __awaiter(this, void 0, void 0, function* () {
        logger.info(`Changes detected in MarkBind Vue Source Files:
Bundle is regenerated by webpack and built pages are re-rendered with the latest bundle.`);
        // reassign the latest updated MarkBindVue bundle
        bundle = requireFromString(newBundle, '');
        Object.values(pageEntries).forEach((pageEntry) => __awaiter(this, void 0, void 0, function* () {
            const { page, compiledVuePage } = pageEntry;
            const renderedVuePageContent = yield renderVuePage(compiledVuePage);
            page.outputPageHtml(renderedVuePageContent);
        }));
    });
}
exports.pageVueServerRenderer = {
    compileVuePageAndCreateScript,
    renderVuePage,
    updateMarkBindVueBundle,
    pageEntries,
};
//# sourceMappingURL=PageVueServerRenderer.js.map