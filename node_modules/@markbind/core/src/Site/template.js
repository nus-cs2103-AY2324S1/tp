"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Template = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const fsUtil = __importStar(require("../utils/fsUtil"));
const requiredFiles = ['index.md', 'site.json', '_markbind/'];
const PATH_TO_TEMPLATE = '../../template';
class Template {
    constructor(rootPath, templatePath) {
        this.root = rootPath;
        this.template = path_1.default.join(__dirname, PATH_TO_TEMPLATE, templatePath);
    }
    validateTemplateFromPath() {
        for (let i = 0; i < requiredFiles.length; i += 1) {
            const requiredFile = requiredFiles[i];
            const requiredFilePath = path_1.default.join(this.template, requiredFile);
            if (!fs_extra_1.default.existsSync(requiredFilePath)) {
                return false;
            }
        }
        return true;
    }
    generateSiteWithTemplate() {
        return new Promise((resolve, reject) => {
            fs_extra_1.default.access(this.root)
                .catch(() => fs_extra_1.default.mkdirSync(this.root))
                .then(() => fsUtil.copySyncWithOptions(this.template, this.root, { overwrite: false }))
                .then(resolve)
                .catch(reject);
        });
    }
    /**
     * A method for initializing a markbind site according to the given template.
     * Generate the site.json and an index.md file.
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.validateTemplateFromPath()) {
                throw new Error('Template validation failed. Required files does not exist.');
            }
            return new Promise((resolve, reject) => {
                this.generateSiteWithTemplate()
                    .then(resolve)
                    .catch(reject);
            });
        });
    }
}
exports.Template = Template;
//# sourceMappingURL=template.js.map