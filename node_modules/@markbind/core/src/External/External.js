"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.External = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const jsBeautify = __importStar(require("js-beautify"));
const PageSources_1 = require("../Page/PageSources");
const NodeProcessor_1 = require("../html/NodeProcessor");
const fsUtil = __importStar(require("../utils/fsUtil"));
const htmlBeautify = jsBeautify.html;
/**
 * Represents external files (e.g. files referenced by <panel src="...">)
 * not directly included inside the generated page
 */
class External {
    constructor(em, srcFilePath) {
        this.externalManager = em;
        this.sourceFilePath = srcFilePath;
        this.includedFiles = new Set([srcFilePath]);
    }
    /**
     * Generates the content of this External instance
     * @param asIfAtFilePath
     * @param resultPath
     * @param config
     * @return {Promise<External>}
     */
    resolveDependency(asIfAtFilePath, resultPath, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileConfig = Object.assign(Object.assign({}, config), { headerIdMap: {} });
            const { variableProcessor, pluginManager, siteLinkManager } = config;
            const pageSources = new PageSources_1.PageSources();
            const docId = `ext-${fsUtil.removeExtension(path_1.default.basename(asIfAtFilePath))}`;
            const nodeProcessor = new NodeProcessor_1.NodeProcessor(fileConfig, pageSources, variableProcessor, pluginManager, siteLinkManager, undefined, docId);
            const nunjucksProcessed = variableProcessor.renderWithSiteVariables(this.sourceFilePath, pageSources);
            const mdHtmlProcessed = yield nodeProcessor.process(this.sourceFilePath, nunjucksProcessed, asIfAtFilePath);
            const pluginPostRendered = pluginManager.postRender(nodeProcessor.frontmatter, mdHtmlProcessed);
            const outputContentHTML = process.env.TEST_MODE
                ? htmlBeautify(pluginPostRendered, pluginManager.htmlBeautifyOptions)
                : pluginPostRendered;
            yield fs_extra_1.default.outputFile(resultPath, outputContentHTML);
            pageSources.addAllToSet(this.includedFiles);
            yield this.externalManager.generateDependencies(pageSources.getDynamicIncludeSrc(), this.includedFiles);
            return this;
        });
    }
}
exports.External = External;
//# sourceMappingURL=External.js.map