"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalManager = void 0;
const path_1 = __importDefault(require("path"));
const uniqBy_1 = __importDefault(require("lodash/uniqBy"));
const External_1 = require("./External");
const fsUtil = __importStar(require("../utils/fsUtil"));
const urlUtil = __importStar(require("../utils/urlUtil"));
const _ = {
    uniqBy: uniqBy_1.default,
};
/**
 * Manages and generates external files (<panel src="...">) referenced in pages and layouts.
 */
class ExternalManager {
    constructor(cfg) {
        this.config = cfg;
        this.builtFiles = {};
    }
    reset() {
        this.builtFiles = {};
    }
    /**
     * Generates the dependencies referenced by the dependencies provided, and adds any
     * collected sources to the includedFiles set.
     * @param dependencies
     * @param {Set<string>} includedFiles
     * @return {Promise<unknown[]>}
     */
    generateDependencies(dependencies, includedFiles) {
        return __awaiter(this, void 0, void 0, function* () {
            const resolvingExternals = [];
            _.uniqBy(dependencies, d => d.asIfTo).forEach((src) => {
                if (urlUtil.isUrl(src.to)) {
                    return;
                }
                const relativePath = path_1.default.relative(this.config.rootPath, src.asIfTo);
                const resultPath = path_1.default.join(this.config.outputPath, relativePath);
                const resultPathWithExternalExt = fsUtil.setExtension(resultPath, '._include_.html');
                if (!(resultPathWithExternalExt in this.builtFiles)) {
                    const external = new External_1.External(this, src.to);
                    this.builtFiles[resultPathWithExternalExt] = external.resolveDependency(src.asIfTo, resultPathWithExternalExt, this.config);
                }
                resolvingExternals.push(this.builtFiles[resultPathWithExternalExt]);
            });
            const externals = yield Promise.all(resolvingExternals);
            externals.forEach((external) => {
                external.includedFiles.forEach(filePath => includedFiles.add(filePath));
            });
        });
    }
}
exports.ExternalManager = ExternalManager;
//# sourceMappingURL=ExternalManager.js.map