import { External } from './External';
import type { DynamicSrc } from '../Page/PageSources';
import type { VariableProcessor } from '../variables/VariableProcessor';
import type { SiteLinkManager } from '../html/SiteLinkManager';
import type { PluginManager } from '../plugins/PluginManager';
import { NodeProcessorConfig } from '../html/NodeProcessor';
export type ExternalManagerConfig = NodeProcessorConfig & {
    variableProcessor: VariableProcessor;
    siteLinkManager: SiteLinkManager;
    pluginManager: PluginManager;
};
/**
 * Manages and generates external files (<panel src="...">) referenced in pages and layouts.
 */
export declare class ExternalManager {
    config: ExternalManagerConfig;
    builtFiles: Record<string, Promise<External>>;
    constructor(cfg: ExternalManagerConfig);
    reset(): void;
    /**
     * Generates the dependencies referenced by the dependencies provided, and adds any
     * collected sources to the includedFiles set.
     * @param dependencies
     * @param {Set<string>} includedFiles
     * @return {Promise<unknown[]>}
     */
    generateDependencies(dependencies: DynamicSrc[], includedFiles: Set<string>): Promise<void>;
}
//# sourceMappingURL=ExternalManager.d.ts.map