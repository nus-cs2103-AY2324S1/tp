"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const cheerio_1 = __importDefault(require("cheerio"));
const escapeRegExp_1 = __importDefault(require("lodash/escapeRegExp"));
/**
 * Filters out elements on the page based on config tags
 * @param tags to filter
 * @param content of the page
 */
function filterTags(tags, content) {
    if (!tags) {
        return content;
    }
    const $ = cheerio_1.default.load(content);
    const tagOperations = tags.map(tag => ({
        // Trim leading + or -, replace * with .*, add ^ and $
        tagExp: `^${(0, escapeRegExp_1.default)(tag.replace(/^(\+|-)/g, '')).replace(/\\\*/, '.*')}$`,
        // Whether it is makes tags visible or hides them
        isHidden: tag.startsWith('-'),
    }));
    $('[tags]').each((_i, element) => {
        var _a;
        $(element).attr('hidden', 'true');
        (_a = $(element).attr('tags')) === null || _a === void 0 ? void 0 : _a.split(' ').forEach((tag) => {
            tagOperations.forEach((tagOperation) => {
                if (!tag.match(tagOperation.tagExp)) {
                    return;
                }
                if (tagOperation.isHidden) {
                    $(element).attr('hidden', 'true');
                }
                else {
                    $(element).removeAttr('hidden');
                }
            });
        });
    });
    $('[hidden]').remove();
    return $.html();
}
module.exports = {
    postRender: (pluginContext, frontmatter, content) => {
        // Tags specified in site.json will be merged with tags specified in frontmatter
        const mergedTags = (frontmatter.tags || []).concat(pluginContext.tags || []);
        return filterTags(mergedTags, content);
    },
};
//# sourceMappingURL=filterTags.js.map