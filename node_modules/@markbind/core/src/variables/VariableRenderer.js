"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableRenderer = void 0;
const path_1 = __importDefault(require("path"));
const nunjucks_1 = __importDefault(require("nunjucks"));
const PageSources_1 = require("../Page/PageSources");
const nunjucks_extensions_1 = require("../lib/nunjucks-extensions");
const fsUtil = __importStar(require("../utils/fsUtil"));
require('../patches/nunjucks'); // load patch
const unescapedEnv = nunjucks_1.default.configure({ autoescape: false })
    .addFilter('date', nunjucks_extensions_1.dateFilter);
/**
 * Wrapper class over a nunjucks environment configured for the respective (sub)site.
 */
class VariableRenderer {
    constructor(siteRootPath) {
        this.siteRootPath = siteRootPath;
        this.pageSources = new PageSources_1.PageSources();
        this.nj = nunjucks_1.default.configure(siteRootPath, { autoescape: false });
        this.nj.addFilter('date', nunjucks_extensions_1.dateFilter);
        this.nj.addExtension('SetExternalExtension', new nunjucks_extensions_1.SetExternalExtension(siteRootPath, this.nj));
        this.nj.on('load', (name, source) => {
            this.pageSources.staticIncludeSrc.push({ to: source.path });
        });
    }
    /**
     * Processes content with the instance's nunjucks environment.
     * @param content to process
     * @param variables to render the content with
     * @param pageSources to add dependencies found during nunjucks rendering to
     * @return nunjucks processed content
     */
    renderString(content, variables, pageSources) {
        this.pageSources = pageSources;
        return this.nj.renderString(content, variables);
    }
    /**
     * Processes file content with the instance's nunjucks environment.
     * @param contentFilePath to process
     * @param variables to render the content with
     * @param pageSources to add dependencies found during nunjucks rendering to
     * @return nunjucks processed content
     */
    renderFile(contentFilePath, variables, pageSources) {
        this.pageSources = pageSources;
        const templateName = fsUtil.ensurePosix(path_1.default.relative(this.siteRootPath, contentFilePath));
        return this.nj.render(templateName, variables);
    }
    /**
     Invalidate the internal nunjucks template cache
     */
    invalidateCache() {
        // Custom method from our patch
        // @ts-ignore
        this.nj.invalidateCache();
    }
    /**
     * Compiles a template specified at src independent of the template directory.
     * This is used for the page template file (page.njk), where none of nunjucks' features
     * involving path resolving are used.
     * @param templatePath of the template to compile
     */
    static compile(templatePath) {
        return nunjucks_1.default.compile(templatePath, unescapedEnv);
    }
}
exports.VariableRenderer = VariableRenderer;
//# sourceMappingURL=VariableRenderer.js.map