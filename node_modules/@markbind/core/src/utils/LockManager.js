"use strict";
const uuid_1 = require("uuid");
/**
 * The `LockManager` is a singleton class designed to help wait for required async
 * promised operations to complete
 * before the page is generated. It provides functionalities to create, delete, and wait
 * for the release of locks.
 * The locks are stored in a Map with a unique ID (either provided or auto-generated) as
 * the key.
 * The class provides an instance property to get the singleton instance of `LockManager`.
 */
class LockManager {
    /**
     * Private constructor to prevent direct instantiation from outside.
     * Initializes the locks Map.
     */
    constructor() {
        this.locks = new Map();
    }
    /**
     * Provides a way to access the single instance of the LockManager.
     * If it doesn't exist, it creates one.
     * @returns {LockManager} The single instance of LockManager.
     */
    static get instance() {
        if (!LockManager._instance) {
            LockManager._instance = new LockManager();
        }
        return LockManager._instance;
    }
    /**
     * Creates a new lock.
     * @param {string} [id] - An optional ID to use for the lock. If not provided, a UUID will be generated.
     * @returns {string} The ID of the created lock.
     */
    createLock(id) {
        const lockId = id !== null && id !== void 0 ? id : (0, uuid_1.v4)();
        this.locks.set(lockId, true);
        return lockId;
    }
    /**
     * Deletes a lock by its ID.
     * @param {string} lockId - The ID of the lock to be deleted.
     */
    deleteLock(lockId) {
        this.locks.delete(lockId);
    }
    /**
     * Deletes all locks, clearing the locks Map.
     */
    deleteAllLocks() {
        this.locks.clear();
    }
    /**
     * Waits until all locks are released and then resolves.
     * @returns {Promise<void>} A promise that resolves when all locks are released.
     */
    waitForLockRelease() {
        return new Promise((resolve) => {
            const checkLocks = () => {
                if (this.locks.size === 0) {
                    resolve();
                }
                else {
                    setTimeout(checkLocks, 100);
                }
            };
            checkLocks();
        });
    }
}
module.exports = LockManager.instance;
//# sourceMappingURL=LockManager.js.map