"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.delay = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
/**
* Creates a function that delays invoking `func` until after `wait` milliseconds have elapsed
* and the running `func` has resolved/rejected.
* @param func the promise-returning function to delay,
*        func should take in a single array
* @param wait the number of milliseconds to delay
* @returns delayedFunc that takes in a single argument (either an array or a single value)
*/
function delay(func, wait) {
    let context;
    let pendingArgs = [];
    let runningPromise = bluebird_1.default.resolve();
    let waitingPromise = null;
    return function (arg) {
        context = this;
        if (Array.isArray(arg)) {
            pendingArgs = pendingArgs.concat(arg);
        }
        else {
            pendingArgs.push(arg);
        }
        if (waitingPromise === null) {
            waitingPromise = bluebird_1.default.all([bluebird_1.default.delay(wait), runningPromise])
                .then(() => {
                runningPromise = waitingPromise || bluebird_1.default.resolve();
                waitingPromise = null;
                const funcPromise = func.apply(context, [pendingArgs]);
                pendingArgs = [];
                return funcPromise;
            });
        }
        return waitingPromise;
    };
}
exports.delay = delay;
//# sourceMappingURL=delay.js.map