"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRemoteUrl = exports.getRemoteBranchFile = void 0;
/**
 * Contains methods using simple-git to perform commands relating to git.
 */
/**
 * Returns the contents of a remote file, undefined if an error was encountered.
 * See: https://git-scm.com/docs/git-cat-file for accepted values for each input.
 */
function getRemoteBranchFile(simpleGit, type, remote, branch, fileName) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const catFileTarget = `${remote}/${branch}:${fileName}`;
            return yield simpleGit.catFile([type, catFileTarget]);
        }
        catch (e) {
            return undefined;
        }
    });
}
exports.getRemoteBranchFile = getRemoteBranchFile;
/**
 * Returns the contents of a remote url (https or ssh), undefined if an error was encountered.
 */
function getRemoteUrl(simpleGit, remote) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield simpleGit.remote(['get-url', remote]);
        }
        catch (e) {
            return undefined;
        }
    });
}
exports.getRemoteUrl = getRemoteUrl;
//# sourceMappingURL=git.js.map