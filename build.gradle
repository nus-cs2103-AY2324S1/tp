plugins {
    // application includes java
    id 'application'
    id 'checkstyle'

    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenCentral()
}

dependencies {
    String versionJUnit = '5.10.0'
    /* NOTE
     * Upgrading Jackson to 2.15.2 causes some tests to fail, as saving Config's
     * Path results in a full path instead of the original relative one.
    */
    String versionJackson = '2.7.0'
    /* NOTE
     * We stay on JavaFX 17 instead of 21, for better Java 11 compatibility in
     * general.
     *
     * The documentation states that Java 17 is required for either, but Gluon's
     * download page states otherwise:
     * • https://openjfx.io/openjfx-docs/
     * • https://gluonhq.com/products/javafx/
    */
    String versionJavaFx = '17.0.9'

    implementation group: 'org.openjfx', name: 'javafx-base', version: versionJavaFx, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: versionJavaFx, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: versionJavaFx, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: versionJavaFx, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: versionJavaFx, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: versionJavaFx, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: versionJavaFx, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: versionJavaFx, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: versionJavaFx, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: versionJavaFx, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: versionJavaFx, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: versionJavaFx, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versionJackson
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versionJackson

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versionJUnit
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versionJUnit
}



// https://docs.gradle.org/current/userguide/img/javaPluginTasks.png
defaultTasks 'clean', 'test'

java {
    // targetCompatibility also defaults to sourceCompatibility
    sourceCompatibility JavaVersion.VERSION_11
}

application {
    mainClass = 'swe.context.Main'
}

clean {
    delete './data/'
    delete './settings.json'
    delete fileTree('./') { include '*.log.*' }
}

run {
    enableAssertions true
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task coverage(type: JacocoReport) {
    // "Task ':coverage' uses this output of task ':test' without declaring an
    // explicit or implicit dependency. This can lead to incorrect results being
    // produced, depending on what order the tasks are executed."
    dependsOn test

    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.required = true
        xml.required = true
    }
}

checkstyle {
    toolVersion = '10.2'
}

shadowJar {
    archiveFileName = 'context.jar'
}
