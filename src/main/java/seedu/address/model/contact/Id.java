package seedu.address.model.contact;

import static java.util.Objects.requireNonNull;
import static seedu.address.commons.util.AppUtil.checkArgument;

import java.util.Random;
import java.util.UUID;

/**
 * Represents a Contact's unique Id in the address book.
 * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}
 */
public class Id {
    public static final String MESSAGE_CONSTRAINTS =
            "Id should only contain alphanumeric characters, underscores and dashes, and it should not be blank. "
                    + "Ids must also start with alphabets, and may not have consecutive underscores and/or dashes.";

    /**
     * The first character of the id must not be a whitespace,
     * otherwise " " (a blank string) becomes a valid input.
     */
    public static final String VALIDATION_REGEX = "[a-zA-Z](([_\\-]?[a-zA-Z0-9])*)";

    public final String value;

    /**
     * Constructs a {@code Id}.
     *
     * @param id A valid id.
     */
    public Id(String id) {
        requireNonNull(id);
        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);
        value = id;
    }

    /**
     * Constructs an autogenerated {@code Id}.
     */
    public Id() {
        value = "i-" + UUID.randomUUID().toString();
    }

    /**
     * Synthesizes an {@link Id} from a given string.
     */
    public static Id synthesizeFrom(String input) {
        if (input == null || input.isBlank()) {
            return new Id();
        }

        String resultingIdString = input.trim().toLowerCase();

        // Ensure leading letters
        if (!resultingIdString.matches("^[a-zA-Z].*")) {
            resultingIdString = "i-" + resultingIdString;
        }

        // Ensure no non-accepted characters
        resultingIdString = resultingIdString
                .replaceAll("[ \t\n]", "-")
                .replaceAll("[^a-zA-Z0-9_\\-]", "x");

        // Ensure no repeated _ or -
        resultingIdString = resultingIdString
                .replaceAll("(-_+|_-+)", "-")
                .replaceAll("_{2,}", "_")
                .replaceAll("-{2,}", "-");

        // Add a random trailing 6-digit hex to minimize collisions
        Random random = new Random();
        int hexValue = random.nextInt(0x1_000_000);

        if (resultingIdString.matches("(.*)[^_\\-]$")) {
            // Append a trailing dash (if one isn't present) before the hex value
            resultingIdString += "-";
        }
        resultingIdString += String.format("%06x", hexValue);

        // Construct and return our new id
        try {
            return new Id(resultingIdString);
        } catch (IllegalArgumentException e) {
            // If we still fail due to an invalid format, generate a random one.
            //
            // Note: It is best to always synthesize user-friendly id values. So, if we have values that result in
            //       parse errors, consider checking what cases have been missed and normalize them to the rules.
            return new Id();
        }
    }


    /**
     * Returns true if a given string is a valid id.
     */
    public static boolean isValidId(String test) {
        return test.matches(VALIDATION_REGEX);
    }


    @Override
    public String toString() {
        return value;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        // instanceof handles nulls
        if (!(other instanceof Id)) {
            return false;
        }

        Id otherId = (Id) other;
        return value.equals(otherId.value);
    }

    @Override
    public int hashCode() {
        return value.hashCode();
    }

}
